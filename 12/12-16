#include "apue.h" 
#include <pthread.h>

int quitflag;
sigset_t mask;

pthread_mutex_t lock = PTHREAD_MUTEX_INITIALIZER;
pthread_cond_t  waitloc = PTHREAD_COND_INITIALIZER;

void *
thread(void *arg) {
	int err,signo;

	// 线程循环等待,指定信号到来,然后退出
	for (; ;) {
		err = sigwait(&mask,&signo);
		if (err != 0)
			err_exit(err,"sigwait failed");
		switch(signo) {
		case SIGINT:
			printf("\ninterrupt\n");
			break;

		case SIGQUIT:
			pthread_mutex_lock(&lock);
			printf("\nreceive interrupt\n");
			quitflag = 1;
			pthread_mutex_unlock(&lock);
			pthread_cond_signal(&waitloc);
			return 0;

		default:
			printf("unexpected signal %d\n",signo);
			exit(1);
		}
	}
}
 
int main(int argc,char *argv[]) {
	int err;
	sigset_t oldmask;
	pthread_t tid;

	sigemptyset(&mask);
	sigaddset(&mask,SIGINT);
	sigaddset(&mask,SIGQUIT);
	if ((err = sigprocmask(SIG_BLOCK,&mask,&oldmask)) != 0)
		err_exit(err,"SIG_BLOCK error");

	// 信号掩码已经设置好,然后新创建的线程继承此信号掩码

	err = pthread_create(&tid,NULL,thread,NULL);
	if (err != 0)
		err_exit(err,"can't create thread");

	pthread_mutex_lock(&lock);
	while (quitflag == 0)
		// 第二个参数传入上锁的互斥量
		pthread_cond_wait(&waitloc,&lock);
	pthread_mutex_unlock(&lock);

	quitflag = 0;


	// reset default sigset_t
	if (sigprocmask(SIG_SETMASK,&oldmask,NULL) < 0)
		err_sys("SIG_SETMASK error");
    exit(0);
}
